'use strict';

require('./cropper.css');

(function (w) {
  'use strict';

  var _cropper;
  var doc = document;

  _cropper = function cropper(elem, options) {
    elem = _cropper.element(elem);
    _cropper.on(elem, 'change', function (event) {
      var file = new FileReader();
      var img = new Image();
      var div = doc.createElement('div');
      var canvas = doc.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var w = doc.documentElement.clientWidth;
      var h = doc.documentElement.clientHeight;
      var html = '';
      file.readAsDataURL(elem.files[0]);
      div.style.cssText = 'width:' + w + 'px;height:' + h + 'px;';
      div.className = 'cropper';
      w = w > 640 ? 640 : w;
      canvas.width = options.size || w;
      canvas.height = options.size || w;
      canvas.className = 'cropper-canvas';
      html += '<div class="cropper-view" style="width:' + w + 'px;height:' + w + 'px;margin:-' + w / 2 + 'px 0 0 -' + w / 2 + 'px;"></div>';
      html += '<div class="cropper-btn"><a class="cropper-btn-cancel" href="javascript:void(0);">取消</a>';
      html += '<a class="cropper-btn-ok" href="javascript:void(0);">截取</a></div></div>';
      _cropper.on(div, 'touchstart touchmove touchend', function (event) {
        event.preventDefault();
      });
      file.onload = function () {
        img.src = file.result;
      };
      img.onload = function () {
        var width = img.width,
            height = img.height;

        var size = (width > height ? width / height : 1) * w;
        var top = width > height ? (h - w) / 2 : 0;
        var left = width > height ? -width * (w / height) / 2 + w / 2 : 0;
        html = '<div class="cropper-container cropper-anime-middle"><img class="cropper-img" src="' + file.result + '" width="' + size + '" style="top:' + top + 'px;left:' + left + 'px;" />' + html;
        div.innerHTML = html;
        _cropper.element('body').appendChild(div);
        var cele = _cropper.element('.cropper');
        var conta = _cropper.element('.cropper-container');
        var view = _cropper.element('.cropper-view');
        var cimg = _cropper.element('.cropper-img');
        var cancel = _cropper.element('.cropper-btn-cancel');
        var ok = _cropper.element('.cropper-btn-ok');
        var startScale = 1,
            scale = void 0,
            endScale = void 0,
            isMove = void 0,
            x1 = void 0,
            x2 = void 0,
            y1 = void 0,
            y2 = void 0,
            ex = left,
            ey = top;
        setTimeout(function () {
          conta.className = 'cropper-container cropper-anime-middle translateY';
        }, 0);
        _cropper.on(view, 'touchstart touchmove touchend', function (event) {
          var touch1 = event.targetTouches[0],
              touch2 = event.targetTouches[1],
              fingers = event.touches.length;
          if (event.type == 'touchstart') {
            if (fingers === 2) {
              scale = Math.abs(touch1.pageX - touch2.pageX);
              isMove = false;
            } else if (fingers === 1) {
              x1 = touch1.pageX;
              y1 = touch1.pageY;
              isMove = true;
            }
          }
          if (event.type == 'touchmove') {
            if (fingers === 2) {
              endScale = startScale + (Math.abs(touch1.pageX - touch2.pageX) - scale) / w;
              cimg.style.width = endScale * size + 'px';
              isMove = false;
            } else if (fingers === 1) {
              x2 = touch1.pageX - x1;
              y2 = touch1.pageY - y1;
              cimg.style.left = x2 + ex + 'px';
              cimg.style.top = y2 + ey + 'px';
              isMove = true;
            }
          }
          if (event.type == 'touchend') {
            cimg.className = 'cropper-img cropper-anime';
            if (isMove) {
              ex = x2 + ex;
              ey = y2 + ey;
              var rx = -cimg.width + w;
              ex = ex > 0 ? 0 : ex < rx ? rx : ex;
              var ty = (h - w) / 2;
              var by = h - (cimg.height + ty);
              ey = ey > ty ? ty : ey < by ? by : ey;
              cimg.style.left = ex + 'px';
              cimg.style.top = ey + 'px';
            } else {
              startScale = endScale > 1 ? endScale : 1;
              cimg.style.width = startScale * size + 'px';
            }
            setTimeout(function () {
              cimg.className = 'cropper-img';
            }, 200);
          }
          event.preventDefault();
        });
        _cropper.on(cancel, 'touchend', function () {
          conta.className = 'cropper-container cropper-anime-middle';
          elem.value = null;
          setTimeout(function () {
            _cropper.element('body').removeChild(cele);
          }, 350);
        });
        _cropper.on(ok, 'touchend', function () {
          if (Uint8Array && atob && Blob) {
            var mul = (options.size || w) / w;
            ctx.drawImage(img, 0, 0, width, height, ex, ey - (h - w) / 2, cimg.width * mul, cimg.height * mul);
            var src = canvas.toDataURL();
            cele.appendChild(canvas);
            src = src.split(',')[1];
            src = window.atob(src);
            var ia = new Uint8Array(src.length);
            for (var i = 0; i < src.length; i++) {
              ia[i] = src.charCodeAt(i);
            };
            options.success(new Blob([ia], { type: "image/png" }));
          } else {
            alert('Your browser doesn\'t support it');
          }
        });
      };
    });
  };

  _cropper.element = function (elem) {
    if (/^\./.test(elem)) {
      elem = doc.getElementsByClassName(elem.substr(1));
      return elem.length == 1 ? elem[0] : elem;
    } else if (/^#/.test(elem)) {
      return doc.getElementById(elem.substr(1));
    } else {
      elem = doc.getElementsByTagName(elem);
      return elem.length == 1 ? elem[0] : elem;
    }
  };

  _cropper.on = function (elem, type, func, capture) {
    type = type.split(' ');
    for (var i = 0; i < type.length; i++) {
      if (window.addEventListener) {
        elem.addEventListener(type[i], func, capture || false);
      } else {
        elem.attachEvent('on' + type[i], func);
      }
    }
  };

  w.cropper = _cropper;
})(window);

// example

// cropper('.file', {
//   size: 400,
//   success: function(img){
//     console.log(typeof img);
//   }
// });
